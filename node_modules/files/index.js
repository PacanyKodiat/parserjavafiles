var fs = require('fs');
var strings = require('strings');
const path = require('path');
var errors = require('errors');
function File(name, dir) {
    this._dir = dir;
    this._type = path.extname(name);
    this._name = path.basename(name, this._type);
    this._fullname = path.join(this._dir, this._name + this._type);
    if (this._type == Config.FormatReadFile) {
        File.count++;
        try {
            this._content = fs.readFileSync(this._fullname).toString();
            for (var i = 0; i < File.HTMLFiles.length; i++) {
                if (File.HTMLFiles[i]._convertname == this._name) {
                    this._funcName = strings.convertFuncName(File.HTMLFiles[i]._name);
                }
            }
            if (!this._fullname) {
                console.error(Config.fileNotFound);
            }
        } catch (err) {
            console.log(err);
        }
    } else {
        this._convertname = strings.str_replace(Config.original, Config.replace, this._name);
    }
}
File.count = 0;

File.prototype.save = function () {
    var filename = path.join(Config.SaveFilesDir, this._name + this._type);
    var file = fs.openSync(filename, 'w');
    fs.writeFileSync(filename, this._content, 'utf8');
    console.log(this._fullname + " -> converted!\n");
};
File.prototype.Errors = function () {
    var arrErrors = this._content.match(new RegExp(Config.errorFound + '.*\n', 'gi'));
    for (var i = 0; i < arrErrors.length; i++) {
        var error = errors.getError(arrErrors[i]);
        console.log(error);
        this._content = this._content.replace(arrErrors[i], "resheno\n");
    }
};
File.prototype.updateContent = function (content) {
    this._content = strings.removeOldCode(this.getContent(), Config.countStrRemoveAfterKroku);
    this._content = strings.addComments(this.getContent(), this.getFuncName());
};
File.prototype.updateFuncName = function () {
    var funcname = this._content.substring(this._content.match(/void\s/i).index + 5, this._content.match(/throws/i).index - 3);
    this._content = this._content.replace(funcname, this._funcName);
};
File.prototype.getFuncName = function () {
    return this._funcName;
};
File.prototype.getContent = function () {
    if (this._content) {
        return this._content;
    } else {
        console.error(Config.MessageContentNotFound + this._fullname);
    }
};
File.prototype.cutContent = function () {
    var start = this._content.match(new RegExp(Config.cutContentStart, 'i'));
    var end = this._content.match(new RegExp(Config.cutContentEnd, 'i'));
    if (start && end) {
        if (start.index > end.index) {
            console.error(this._fullname + Config.searchFunctionError2);
        }
        this._content = this._content.substring(start.index, end.index);
    } else {
        console.error(this._fullname + Config.searchFunctionError);
    }
};
File.getFilesFromDirectory = function (dirname) {
    try {
        var files = fs.readdirSync(dirname);
        var listfiles = [];
        for (var i = 0; i < files.length; i++) {
            listfiles.push(new File(files[i], dirname));
        }
    } catch (err) {
        if (err.code == 'ENOENT') {
            console.error(err.message);
        }
        else {
            console.error(err);
        }
    }
    return listfiles;
};
File.getFiles = function (typefile) {
    var result = [];
    for (var i = 0; i < File.listfiles.length; i++) {
        if (typefile == File.listfiles[i]._type) {
            result.push(File.listfiles[i]);
        }
    }
    return result;
};
File.HTMLFiles = File.getFilesFromDirectory(Config.HTMLFilesDir);
module.exports = File;

